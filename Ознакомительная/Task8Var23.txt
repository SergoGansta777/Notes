using System;
using System.Linq;
using System.Collections;

namespace practise
{
    class program
    {
        static void Main()
        {
            DoublyLinkedList<char> listOfCipher = new DoublyLinkedList<char>();
            for (char i = 'А'; i <= 'Я'; i++)
            {
                listOfCipher.Add(i);
                listOfCipher.Add(Convert.ToChar((i+13)));
            }
            for (char j = 'a'; j <= 'я'; j++)
            {
                listOfCipher.Add(j);
                listOfCipher.Add(Convert.ToChar((j+45)*3));
            }

            string result = Encrytpion(listOfCipher);
            using (var targetFile = new StreamWriter((/home/SergoGansta777/Documents/Notes/Ознакомительная/ResultTextForTask8.txt)))
            {
                targetFile.WriteLine(result);
                targetFile.WriteLine((Decryption(listOfCipher,result)));
            }
        }

        static string Encrytpion( DoublyLinkedList<char> listOfCipher)
        {
            var textFromFile1 =
                File.ReadAllText(/home/SergoGansta777/Documents/Notes/Ознакомительная/textForTask8.txt);
            var textFromFile = textFromFile1.ToCharArray();
            for (int i = 0; i < textFromFile.Length; i++)
            {
                DoublyNode<char> symbol = listOfCipher.head;
                while (symbol != null)
                {
                    if (textFromFile[i]==(char)symbol.Data)
                    {
                        textFromFile[i] = (char)symbol.Next.Data;
                        break;
                    }
                    symbol = symbol.Next.Next;
                }
               
            }
            string result = new string(textFromFile);
            return result;
        }

        static string Decryption(DoublyLinkedList<char> listOfCipher, string textFromFile1)
        {
            var textFromFile = textFromFile1.ToCharArray();
            for (int i = 0; i < textFromFile.Length-1; i++)
            {
                DoublyNode<char> symbol = listOfCipher.head;
                symbol = symbol.Next;
                while (symbol != null)
                {
                    if (textFromFile[i]==(char)symbol.Data)
                    {
                        textFromFile[i] = (char)symbol.Previous.Data;
                        break;
                    }

                    try
                    {
                        symbol = symbol.Next.Next;
                    }
                    catch
                    {
                        break;
                    }
                   
                }
               
            }
            string result = new string(textFromFile);
            return result;
            
        }
    }
    public class DoublyNode<T>
    {
        public DoublyNode(T data)
        {
            Data = data;
        }
        public T Data { get; set; }
        public DoublyNode<T> Previous { get; set; }
        public DoublyNode<T> Next { get; set; }
    }
     public class DoublyLinkedList<T> : IEnumerable<T>
    {
        public DoublyNode<T> head { get; set; }
        public DoublyNode<T> tail { get; set; }
        int count;

        public void Add(T data)
        {
            DoublyNode<T> node = new DoublyNode<T>(data);
 
            if (head == null)
                head = node;
            else
            {
                tail.Next = node;
                node.Previous = tail;
            }
            tail = node;
            count++;
        }
        public void AddFirst(T data)
        {
            DoublyNode<T> node = new DoublyNode<T>(data);
            DoublyNode<T> temp = head;
            node.Next = temp;
            head = node;
            if (count == 0)
                tail = head;
            else
                temp.Previous = node;
            count++;
        }

        public int Count { get { return count; } }
        public bool IsEmpty { get { return count == 0; } }
 

        IEnumerator IEnumerable.GetEnumerator()
        {
            return ((IEnumerable)this).GetEnumerator();
        }
 
        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            DoublyNode<T> current = head;
            while (current != null)
            {
                yield return current.Data;
                current = current.Next;
            }
        }
 
        public IEnumerable<T> BackEnumerator()
        {
            DoublyNode<T> current = tail;
            while (current != null)
            {
                yield return current.Data;
                current = current.Previous;
            }
        }
    }
}

